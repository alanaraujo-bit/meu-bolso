// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String   @id @default(cuid())
  senha     String
  email     String   @unique
  nome      String
  avatar    String?
  criadoEm  DateTime @default(now())
  atualizadoEm DateTime @updatedAt

  // Relacionamentos
  categorias            Categoria[]
  transacoes            Transacao[]
  metas                 Meta[]
  transacoesRecorrentes TransacaoRecorrente[]

  @@map("usuarios")
}

model Categoria {
  id       String        @id @default(cuid())
  userId   String
  nome     String
  tipo     CategoriaTipo
  cor      String        @default("#3B82F6")
  icone    String        @default("ðŸ’°")
  criadoEm DateTime      @default(now())
  atualizadoEm DateTime  @updatedAt

  // Relacionamentos
  usuario               Usuario               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transacoes            Transacao[]
  transacoesRecorrentes TransacaoRecorrente[]

  @@unique([userId, nome])
  @@map("categorias")
}

model Transacao {
  id                    String    @id @default(cuid())
  userId                String
  categoriaId           String?
  tipo                  TransacaoTipo
  valor                 Decimal   @db.Decimal(10, 2)
  descricao             String
  data                  DateTime
  tags                  Json      @default("[]")
  anexos                Json      @default("[]")
  isRecorrente          Boolean   @default(false)
  transacaoRecorrenteId String?
  metaId                String?
  criadoEm              DateTime  @default(now())
  atualizadoEm          DateTime  @updatedAt

  // Relacionamentos
  usuario             Usuario              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoria           Categoria?           @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  transacaoRecorrente TransacaoRecorrente? @relation(fields: [transacaoRecorrenteId], references: [id], onDelete: SetNull)
  meta                Meta?                @relation(fields: [metaId], references: [id], onDelete: SetNull)

  @@map("transacoes")
}

model TransacaoRecorrente {
  id          String     @id @default(cuid())
  userId      String
  categoriaId String
  tipo        TransacaoTipo
  valor       Decimal    @db.Decimal(10, 2)
  descricao   String
  frequencia  Frequencia
  dataInicio  DateTime
  dataFim     DateTime?
  isActive    Boolean    @default(true)
  criadoEm    DateTime   @default(now())
  atualizadoEm DateTime  @updatedAt

  // Relacionamentos
  usuario    Usuario     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoria  Categoria   @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  transacoes Transacao[]

  @@map("transacoes_recorrentes")
}

model Meta {
  id            String    @id @default(cuid())
  userId        String
  nome          String
  valorAlvo     Decimal   @db.Decimal(10, 2)
  currentAmount Decimal   @default(0) @db.Decimal(10, 2)
  dataAlvo      DateTime
  isCompleted   Boolean   @default(false)
  criadoEm      DateTime  @default(now())
  atualizadoEm  DateTime  @updatedAt

  // Relacionamentos
  usuario    Usuario     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transacoes Transacao[]

  @@map("metas")
}

enum CategoriaTipo {
  receita
  despesa
  ambos
}

enum TransacaoTipo {
  receita
  despesa
}

enum Frequencia {
  diario
  semanal
  mensal
  anual
}