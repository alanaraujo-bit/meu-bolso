import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import { prisma } from '@/lib/prisma';

export async function POST(request: NextRequest) {
  try {
    console.log('ÔøΩ === IN√çCIO DEBUG API AVATAR ===');
    
    // Passo 1: Verificar se consegue pegar a sess√£o
    let session;
    try {
      console.log('üìã Passo 1: Obtendo sess√£o...');
      session = await getServerSession(authOptions);
      console.log('‚úÖ Sess√£o obtida:', session ? 'SIM' : 'N√ÉO');
      console.log('üìß Email da sess√£o:', session?.user?.email);
    } catch (sessionError) {
      console.error('‚ùå Erro ao obter sess√£o:', sessionError);
      return NextResponse.json(
        { error: 'Erro ao verificar autentica√ß√£o' },
        { status: 500 }
      );
    }
    
    if (!session?.user?.email) {
      console.log('‚ùå Usu√°rio n√£o autenticado');
      return NextResponse.json(
        { error: 'Usu√°rio n√£o autenticado' },
        { status: 401 }
      );
    }

    // Passo 2: Verificar se consegue ler os dados do request
    let requestData;
    try {
      console.log('üìã Passo 2: Lendo dados do request...');
      requestData = await request.json();
      console.log('‚úÖ Dados recebidos:', requestData);
    } catch (requestError) {
      console.error('‚ùå Erro ao ler request:', requestError);
      return NextResponse.json(
        { error: 'Erro ao ler dados da requisi√ß√£o' },
        { status: 400 }
      );
    }

    const { avatarUrl } = requestData;

    if (!avatarUrl || typeof avatarUrl !== 'string') {
      console.log('‚ùå URL do avatar inv√°lida:', avatarUrl);
      return NextResponse.json(
        { error: 'URL do avatar √© obrigat√≥ria' },
        { status: 400 }
      );
    }

    // Passo 3: Verificar conex√£o com banco
    try {
      console.log('üìã Passo 3: Testando conex√£o com banco...');
      await prisma.$connect();
      console.log('‚úÖ Conex√£o com banco OK');
    } catch (dbError) {
      console.error('‚ùå Erro de conex√£o com banco:', dbError);
      return NextResponse.json(
        { error: 'Erro de conex√£o com banco de dados' },
        { status: 500 }
      );
    }

    // Passo 4: Buscar usu√°rio
    let usuario;
    try {
      console.log('ÔøΩ Passo 4: Buscando usu√°rio...');
      usuario = await prisma.usuario.findUnique({
        where: { email: session.user.email }
      });
      console.log('‚úÖ Usu√°rio encontrado:', usuario ? 'SIM' : 'N√ÉO');
      console.log('üÜî ID do usu√°rio:', usuario?.id);
    } catch (findError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', findError);
      return NextResponse.json(
        { error: 'Erro ao buscar usu√°rio no banco' },
        { status: 500 }
      );
    }

    if (!usuario) {
      console.log('‚ùå Usu√°rio n√£o encontrado no banco');
      return NextResponse.json(
        { error: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      );
    }

    // Passo 5: Atualizar avatar
    let usuarioAtualizado;
    try {
      console.log('ÔøΩ Passo 5: Atualizando avatar...');
      usuarioAtualizado = await prisma.usuario.update({
        where: { email: session.user.email },
        data: { avatarUrl }
      });
      console.log('‚úÖ Avatar atualizado com sucesso');
      console.log('üñºÔ∏è Nova URL do avatar:', usuarioAtualizado.avatarUrl);
    } catch (updateError) {
      console.error('‚ùå Erro ao atualizar avatar:', updateError);
      return NextResponse.json(
        { error: 'Erro ao atualizar avatar no banco' },
        { status: 500 }
      );
    }

    console.log('üéâ === SUCESSO COMPLETO ===');

    return NextResponse.json({
      success: true,
      message: 'Avatar salvo com sucesso',
      avatarUrl: usuarioAtualizado.avatarUrl
    });

  } catch (error) {
    console.error('üí• === ERRO GERAL ===');
    console.error('‚ùå Erro ao salvar avatar:', error);
    console.error('üîç Stack trace:', error instanceof Error ? error.stack : 'Erro desconhecido');
    console.error('üìã Tipo do erro:', typeof error);
    console.error('üè∑Ô∏è Nome do erro:', error instanceof Error ? error.name : 'Desconhecido');
    
    return NextResponse.json(
      { 
        error: 'Erro interno do servidor ao salvar avatar',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      },
      { status: 500 }
    );
  }
}
