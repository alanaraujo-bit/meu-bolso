import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcryptjs';

export async function POST(req: NextRequest) {
  try {
    console.log('üìù Iniciando processo de cadastro...');
    
    const { nome, email, senha } = await req.json();
    console.log('üìã Dados recebidos:', { nome, email, senhaLength: senha?.length });

    // Valida√ß√µes
    if (!nome || !email || !senha) {
      console.log('‚ùå Valida√ß√£o falhou: campos obrigat√≥rios');
      return NextResponse.json({ error: 'Todos os campos s√£o obrigat√≥rios' }, { status: 400 });
    }

    if (senha.length < 6) {
      console.log('‚ùå Valida√ß√£o falhou: senha muito curta');
      return NextResponse.json({ error: 'A senha deve ter pelo menos 6 caracteres' }, { status: 400 });
    }

    // Verificar se o usu√°rio j√° existe
    console.log('üîç Verificando se usu√°rio j√° existe...');
    const usuarioExistente = await prisma.usuario.findUnique({
      where: { email }
    });

    if (usuarioExistente) {
      console.log('‚ùå Usu√°rio j√° existe:', email);
      return NextResponse.json({ error: 'Usu√°rio j√° existe com este email' }, { status: 400 });
    }

    // Criptografar a senha
    console.log('üîê Criptografando senha...');
    const senhaHash = await bcrypt.hash(senha, 12);

    // Criar o usu√°rio
    console.log('üë§ Criando usu√°rio no banco...');
    const usuario = await prisma.usuario.create({
      data: {
        nome,
        email,
        senha: senhaHash
      }
    });

    console.log('‚úÖ Usu√°rio criado com sucesso:', usuario.email);

    return NextResponse.json({
      message: 'Usu√°rio criado com sucesso',
      usuario: {
        id: usuario.id,
        nome: usuario.nome,
        email: usuario.email
      }
    }, { status: 201 });

  } catch (error) {
    console.error('‚ùå Erro detalhado ao criar usu√°rio:', error);
    
    // Tratamento espec√≠fico para erros do Prisma
    if (error && typeof error === 'object' && 'code' in error) {
      const prismaError = error as any;
      
      switch (prismaError.code) {
        case 'P2002':
          console.log('‚ùå Erro P2002: Viola√ß√£o de constraint √∫nica');
          return NextResponse.json({ 
            error: 'Este email j√° est√° em uso' 
          }, { status: 400 });
          
        case 'P2025':
          console.log('‚ùå Erro P2025: Registro n√£o encontrado');
          return NextResponse.json({ 
            error: 'Erro de dados n√£o encontrados' 
          }, { status: 400 });
          
        case 'P1001':
          console.log('‚ùå Erro P1001: N√£o foi poss√≠vel conectar ao banco');
          return NextResponse.json({ 
            error: 'Erro de conex√£o com o banco de dados' 
          }, { status: 500 });
          
        default:
          console.log('‚ùå Erro Prisma desconhecido:', prismaError.code);
          return NextResponse.json({ 
            error: `Erro do banco de dados: ${prismaError.message}` 
          }, { status: 500 });
      }
    }
    
    // Erro gen√©rico
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    console.log('‚ùå Erro gen√©rico:', errorMessage);
    
    return NextResponse.json({ 
      error: 'Erro interno do servidor',
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    }, { status: 500 });
  }
}