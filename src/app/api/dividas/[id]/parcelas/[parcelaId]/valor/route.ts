import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";

// PUT - Editar valor de uma parcela espec√≠fica
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string, parcelaId: string } }
) {
  console.log('ÔøΩ === INICIANDO EDI√á√ÉO DE VALOR ===');
  console.log('ÔøΩ Params recebidos:', params);
  
  try {
    // 1. Verificar sess√£o
    const session = await getServerSession(authOptions);
    console.log('üë§ Sess√£o:', session?.user?.email || 'N√£o encontrada');
    
    if (!session?.user?.email) {
      console.log('‚ùå ERRO: Usu√°rio n√£o autenticado');
      return NextResponse.json({ error: "Usu√°rio n√£o autenticado" }, { status: 401 });
    }

    // 2. Obter dados da requisi√ß√£o
    const body = await request.json();
    console.log('ÔøΩ Body da requisi√ß√£o:', body);
    
    const { novoValor } = body;
    const valor = parseFloat(novoValor);
    
    console.log('üí∞ Valor a ser salvo:', valor, typeof valor);

    // 3. Validar valor
    if (!valor || valor <= 0 || isNaN(valor)) {
      console.log('‚ùå ERRO: Valor inv√°lido -', valor);
      return NextResponse.json({ 
        error: "Valor deve ser um n√∫mero positivo",
        valorRecebido: valor,
        tipo: typeof valor
      }, { status: 400 });
    }

    // 4. Buscar usu√°rio
    const usuario = await prisma.usuario.findUnique({
      where: { email: session.user.email }
    });

    if (!usuario) {
      console.log('‚ùå ERRO: Usu√°rio n√£o encontrado no banco');
      return NextResponse.json({ error: "Usu√°rio n√£o encontrado" }, { status: 404 });
    }

    console.log('‚úÖ Usu√°rio encontrado:', usuario.nome || usuario.email);

    // 5. Verificar se a parcela existe e pertence ao usu√°rio
    const parcela = await prisma.parcelaDivida.findFirst({
      where: {
        id: params.parcelaId,
        divida: {
          id: params.id,
          userId: usuario.id
        }
      },
      include: {
        divida: true
      }
    });

    if (!parcela) {
      console.log('‚ùå ERRO: Parcela n√£o encontrada ou n√£o pertence ao usu√°rio');
      return NextResponse.json({ error: "Parcela n√£o encontrada" }, { status: 404 });
    }

    console.log('üìã Parcela encontrada:', {
      numero: parcela.numero,
      valorAtual: parcela.valor.toNumber(),
      status: parcela.status,
      dividaNome: parcela.divida.nome
    });

    // 6. Verificar se pode editar
    if (parcela.status === 'PAGA') {
      console.log('‚ùå ERRO: Tentando editar parcela j√° paga');
      return NextResponse.json({ 
        error: "N√£o √© poss√≠vel editar parcelas j√° pagas" 
      }, { status: 400 });
    }

    // 7. Atualizar a parcela
    console.log('ÔøΩ Atualizando parcela...');
    const parcelaAtualizada = await prisma.parcelaDivida.update({
      where: { id: params.parcelaId },
      data: { valor: valor }
    });

    console.log('‚úÖ Parcela atualizada:', {
      de: parcela.valor.toNumber(),
      para: parcelaAtualizada.valor.toNumber()
    });

    // 8. Recalcular valor total da d√≠vida
    console.log('üßÆ Recalculando valor total da d√≠vida...');
    const todasParcelas = await prisma.parcelaDivida.findMany({
      where: { dividaId: params.id }
    });

    const novoValorTotal = todasParcelas.reduce((acc: number, p: any) => acc + p.valor.toNumber(), 0);
    console.log('üí∞ Novo valor total calculado:', novoValorTotal);

    // 9. Atualizar d√≠vida
    await prisma.divida.update({
      where: { id: params.id },
      data: { 
        valorTotal: novoValorTotal,
        valorParcela: novoValorTotal / parcela.divida.numeroParcelas
      }
    });

    console.log('üéâ === EDI√á√ÉO CONCLU√çDA COM SUCESSO ===');

    return NextResponse.json({
      success: true,
      message: "Valor atualizado com sucesso!",
      parcela: {
        id: parcelaAtualizada.id,
        numero: parcela.numero,
        valorAnterior: parcela.valor.toNumber(),
        valorNovo: parcelaAtualizada.valor.toNumber(),
      },
      divida: {
        id: params.id,
        novoValorTotal: novoValorTotal
      }
    });

  } catch (error) {
    console.error('üí• ERRO CR√çTICO:', error);
    return NextResponse.json({
      error: "Erro interno do servidor",
      message: error instanceof Error ? error.message : "Erro desconhecido",
      stack: process.env.NODE_ENV === 'development' ? error : undefined
    }, { status: 500 });
  }
}